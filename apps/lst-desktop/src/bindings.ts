
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async getLists() : Promise<Result<string[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_lists") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getNotes() : Promise<Result<string[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_notes") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getList(name: string) : Promise<Result<List, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_list", { name }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async createList(title: string) : Promise<Result<List, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("create_list", { title }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async addItem(list: string, text: string, category: string | null) : Promise<Result<List, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("add_item", { list, text, category }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async toggleItem(list: string, target: string) : Promise<Result<List, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("toggle_item", { list, target }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async editItem(list: string, target: string, text: string) : Promise<Result<List, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("edit_item", { list, target, text }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async removeItem(list: string, target: string) : Promise<Result<List, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("remove_item", { list, target }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async reorderItem(list: string, target: string, newIndex: number) : Promise<Result<List, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("reorder_item", { list, target, newIndex }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async saveList(list: List) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("save_list", { list }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getNote(name: string) : Promise<Result<Note, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_note", { name }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async createNoteCmd(title: string) : Promise<Result<Note, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("create_note_cmd", { title }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async saveNote(note: Note) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("save_note", { note }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteNoteCmd(name: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_note_cmd", { name }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getUiConfig() : Promise<Result<UiConfig, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_ui_config") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async createCategory(listName: string, categoryName: string) : Promise<Result<List, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("create_category", { listName, categoryName }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async moveItemToCategory(listName: string, itemAnchor: string, categoryName: string | null) : Promise<Result<List, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("move_item_to_category", { listName, itemAnchor, categoryName }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteCategory(listName: string, categoryName: string) : Promise<Result<List, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_category", { listName, categoryName }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getCategories(listName: string) : Promise<Result<string[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_categories", { listName }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async renameCategory(listName: string, oldName: string, newName: string) : Promise<Result<List, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("rename_category", { listName, oldName, newName }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getCurrentTheme() : Promise<Result<ThemeData, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_current_theme") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async applyTheme(themeName: string) : Promise<Result<ThemeData, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("apply_theme", { themeName }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listThemes() : Promise<Result<string[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("list_themes") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
};

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

/**
 * Represents a category containing list items
 */
export type Category = { 
/**
 * The name of the category
 */
name: string; 
/**
 * Items in this category
 */
items: ListItem[] }
/**
 * Represents the status of a list item (done or not)
 */
export type ItemStatus = "Todo" | "Done"
/**
 * Represents a complete list with metadata and items
 */
export type List = 
/**
 * Metadata for the list
 */
({ 
/**
 * Unique identifier for the list
 */
id?: string; 
/**
 * Human-readable title of the list
 */
title: string; 
/**
 * List of users who have access to the list
 */
sharing?: string[]; 
/**
 * When the list was last updated
 */
updated?: string }) & { 
/**
 * Items without category (before first headline)
 */
uncategorized_items?: ListItem[]; 
/**
 * Categorized items
 */
categories?: Category[] }
/**
 * Represents a single item in a list
 */
export type ListItem = { 
/**
 * The text content of the item
 */
text: string; 
/**
 * The status of the item (todo or done)
 */
status: ItemStatus; 
/**
 * Unique anchor identifier for the item
 */
anchor: string }
export type Note = { title: string; content: string; created: string | null; file_path: string }
export type ThemeConfig = { vars?: Partial<{ [key in string]: string }> }
export type ThemeData = { css_variables: string; scheme: string; name: string | null; variant: string | null }
export type UiConfig = { resolution_order?: string[]; 
/**
 * Enable Vim-like keybindings in the frontend
 */
vim_mode?: boolean; 
/**
 * Leader key used for command sequences (defaults to space)
 */
leader_key?: string; theme?: ThemeConfig }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
